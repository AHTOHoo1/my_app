{"version":3,"file":"static/js/541.774586a2.chunk.js","mappings":"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","sources":["components/profile_info/ProfileStatusWithHooks.jsx","components/profile_info/Profile_info.jsx","components/prof_posts/post/post.jsx","components/prof_posts/MyPosts.jsx","components/prof_posts/MyPostsContainer.jsx","components/Profile.jsx","components/ProfileContainer.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport './info_style.css';\r\n\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status)\r\n    }, [props.status] )\r\n\r\n    let activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    let deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    let onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <dir>\r\n                    <span onClick={activateEditMode} >Status: {props.status}</span>\r\n                </dir>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input className=\"status__input\" value={status} onChange={onStatusChange} onBlur={deactivateEditMode} autoFocus={true} />\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import Preloader from '../common/preloader/Preloader';\r\nimport './info_style.css';\r\nimport userPhoto from '../../assets/images/user_icon.webp';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\n\r\nconst ProfileInfo = (props) => {\r\n\r\n    if (!props.profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <img src='https://helpx.adobe.com/content/dam/help/en/photoshop/using/convert-color-image-black-white/jcr_content/main-pars/before_and_after/image-before/Landscape-Color.jpg' alt='shapka' className='prof__img'/>\r\n            <div className='prof__info'>\r\n                <div><img src={props.profile.photos.large != null ? props.profile.photos.large : userPhoto } className='ava__img' alt='ava' width={150} height={150} /></div>\r\n                <div className='about'>\r\n                    <div>Name: {props.profile.fullName}</div>\r\n                    <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;\r\n\r\n//src={props.profile.photos.large} className='ava__img' alt='ava' width={150} height={150}\r\n/*<div className='about__data'>○ Name: {props.profile.fullName}</div>\r\n<div className='about__data'>○ About me: {props.profile.aboutMe}</div>\r\n<div className='about__data'>○ Looking for a job: {props.profile.lookingForAJob ? 'Yes, for sure' : 'No no no'}</div>*/","import { useState } from 'react';\r\nimport './post_style.css'\r\n\r\nconst Post = (props) => {\r\n\r\n    let [value, setValue] = useState(props.likes);\r\n    let plusLike = () => {\r\n        setValue(value + 1)\r\n    }    \r\n\r\n    return (\r\n        <div>\r\n            <div className='post__item'>\r\n                <img src='https://cdn-icons-png.flaticon.com/512/1053/1053244.png' alt='avatarka' className='post__ava' />\r\n                <div className='post__text'>{ props.text }</div>\r\n                <div>\r\n                    <button className='like__btn' onClick={plusLike} >\r\n                        <img src='https://cdn-icons-png.flaticon.com/512/57/57602.png' alt='like_img' className='like__img'/>\r\n                        <span>{ value }</span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;\r\n","import './MyPosts_styles.css'\r\nimport Post from './post/post'\r\nimport React from 'react'\r\nimport { Field, Form, Formik } from 'formik'\r\n\r\nconst validatePost = (value) => {\r\n    if (!value) {\r\n        return '☼ Required!';\r\n    } else if (value.length > 30) {\r\n        return 'Max length is 30 simbols(';\r\n    }\r\n}\r\n\r\nconst MyPosts = React.memo(props => {\r\nconsole.log(\"render\")\r\n\r\n    let PostsElements = props.posts\r\n    .map(p => <Post text={p.text} likes={p.likes} key={p.id} />)\r\n\r\n    let addNewPost = (values, {resetForm}) => {\r\n        props.addPost(values.post)\r\n        resetForm()\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h2>My posts</h2>\r\n                <div>\r\n                    <Formik initialValues={{ post: \"\" }} onSubmit={addNewPost}>\r\n                        {({ errors, touched }) => (\r\n                            <Form>\r\n                                <div>\r\n                                    <Field className={errors.post && touched.post ? \"text__input_error\" : \"text__input\"}\r\n                                        component=\"textarea\"\r\n                                        name=\"post\"\r\n                                        validate={validatePost}\r\n                                        placeholder='Enter your text' />\r\n                                </div>\r\n                                {errors.post && touched.post && (\r\n                                    <div>{errors.post}</div>\r\n                                )}\r\n                                <div>\r\n                                    <button className='btn'\r\n                                        type='submit'>Add post</button>\r\n                                </div>\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n                </div>\r\n                <div className='posts'>\r\n                    {PostsElements}\r\n                </div>\r\n            </div >\r\n        </div >\r\n    )\r\n})\r\n\r\nexport default MyPosts\r\n","import { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { addPost } from '../../redux/profile_reducer';\r\nimport MyPosts from './MyPosts'\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {addPost}),\r\n    withAuthRedirect\r\n)(MyPosts);\r\n","import './../App.css'\r\nimport ProfileInfo from './profile_info/Profile_info'\r\nimport MyPostsContainer from './prof_posts/MyPostsContainer'\r\n\r\nconst Profile = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useParams } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from '../hoc/withAuthRedirect';\r\nimport { setUserProfile, getUserProfile, getStatus, updateStatus } from '../redux/profile_reducer';\r\nimport './../App.css'\r\nimport Profile from './Profile';\r\n\r\n\r\nconst withRouter = WrappedComponent => props => {\r\n    const params = useParams();\r\n    return (\r\n        <WrappedComponent {...props} params={params}/>\r\n    )\r\n}\r\n\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.profileId\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props} profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateStatus}/>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    profileId: state.auth.id\r\n});\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        setUserProfile,\r\n        getUserProfile,\r\n        updateStatus,\r\n        getStatus\r\n    }),\r\n    withRouter,\r\n    withAuthRedirect\r\n    \r\n)(ProfileContainer)\r\n"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","onClick","className","value","onChange","e","currentTarget","onBlur","updateStatus","autoFocus","profile","src","alt","photos","large","userPhoto","width","height","fullName","Preloader","likes","setValue","text","validatePost","length","React","console","log","PostsElements","posts","map","p","id","initialValues","post","onSubmit","values","resetForm","addPost","errors","touched","component","name","validate","placeholder","type","compose","connect","state","profilePage","newPostText","withAuthRedirect","MyPosts","MyPostsContainer","ProfileContainer","userId","this","params","profileId","getUserProfile","getStatus","auth","setUserProfile","WrappedComponent","useParams"],"sourceRoot":""}