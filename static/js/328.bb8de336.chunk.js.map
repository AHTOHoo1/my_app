{"version":3,"file":"static/js/328.bb8de336.chunk.js","mappings":"gNAEMA,EAAU,SAAAA,GAAO,OAAI,YAAgC,IAA7BC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,KAASC,GAAY,YAElDC,EAAWF,EAAKG,SAAWH,EAAKI,MAEpC,OACI,2BACMF,IAAY,0BAAOF,EAAKI,SAC1B,gBAAKC,UAAS,wBAAmBH,EAAW,QAAU,IAAtD,UACA,SAAC,GAAD,kBAAaH,GAAWE,WAOvBK,EAAWR,EAAQ,YAGnBS,EAAQT,EAAQ,U,kGCP7B,EAXe,SAACG,GAEZ,IAAIO,EAAO,YAAcP,EAAMQ,GAE/B,OACI,gBAAKJ,UAAU,SAAf,UACI,SAAC,KAAD,CAAMK,GAAIF,EAAMH,UAAU,eAA1B,SAA0CJ,EAAMU,YCD5D,EANgB,SAACV,GACb,OACI,gBAAKI,UAAWJ,EAAMW,cAAtB,SAAsCX,EAAMY,Q,iDCK9CC,GAAcC,EAAAA,EAAAA,GAAiB,IAiB/BC,GAAsBC,EAAAA,EAAAA,GAAU,CAACC,KAAM,wBAAjBD,EAfL,SAAChB,GACpB,OACI,kBAAMkB,SAAUlB,EAAMmB,aAAtB,WACI,SAACC,EAAA,EAAD,CAAOC,YAAY,qBACfjB,UAAU,gBACVkB,UAAWjB,EAAAA,EACXkB,KAAK,iBACLC,SAAU,CAACC,EAAAA,EAAUZ,MACzB,mBAAQT,UAAU,iBAAlB,UACI,gBAAKsB,IAAI,wGAAwGC,IAAI,UAAUvB,UAAU,wBAkCzJ,EA1BgB,SAACJ,GAEb,IAAI4B,EAAQ5B,EAAM6B,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAM,OAAI,SAAC,EAAD,CAAQzB,GAAIyB,EAAOzB,GAAIE,OAAQuB,EAAOvB,QAAauB,EAAOzB,OAExG0B,EAAmBN,EAAMO,SAASH,KAAI,SAAAI,GAAO,OAAI,SAAC,EAAD,CAASxB,KAAMwB,EAAQxB,KAAMD,cAAeyB,EAAQzB,eAAoByB,EAAQ5B,OAOrI,OACI,iBAAKJ,UAAU,UAAf,WACI,gBAAKA,UAAU,iBAAf,SACK0B,KAEL,iBAAK1B,UAAU,WAAf,UACK8B,GACD,SAACnB,EAAD,CAAqBG,SAXb,SAACmB,GACjBrC,EAAMsC,WAAWD,EAAOE,0B,oBCLhC,GAAeC,E,QAAAA,KACXC,EAAAA,EAAAA,KAxBkB,SAACb,GACnB,MAAO,CACHC,YAAaD,EAAMC,eAsBE,CAACS,WAAAA,EAAAA,IAC1BI,EAAAA,EAFJ,CAGEC,I,4ECnCK,IAAMlB,EAAW,SAAAmB,GACpB,IAAIA,EACJ,MAAO,qBAGE9B,EAAmB,SAAC+B,GAAD,OAAe,SAACD,GAC5C,GAAIA,EAAME,OAASD,EAAW,MAAO,CAAC,iBAAkBA,EAAW","sources":["components/common/FormControl/FormControl.js","components/dialogs/dialog/Dialog.jsx","components/dialogs/message/Message.jsx","components/dialogs/Dialogs.jsx","components/dialogs/DialogsContainer.jsx","validators.js"],"sourcesContent":["import './form.css'\r\n\r\nconst Element = Element => ({ input, meta, ...props }) => {\r\n\r\n    let hasError = meta.touched && meta.error\r\n\r\n    return (\r\n        <div>\r\n            { hasError && <span>{meta.error}</span> } \r\n            <div className={`form__control ${hasError ? 'error' : ''}`}>\r\n            <Element {...input} {...props}  />\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const Textarea = Element(\"textarea\")\r\n\r\n\r\nexport const Input = Element(\"input\")\r\n","import { Link } from \"react-router-dom\";\r\n\r\nconst Dialog = (props) => {\r\n\r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n    return (\r\n        <div className='dialog'>\r\n            <Link to={path} className='dialog__item'>{props.friend}</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialog;","\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={props.message_class}>{props.text}</div>\r\n    )\r\n}\r\n\r\nexport default Message;\r\n","import Dialog from './dialog/Dialog'\r\nimport './Dialogs_style.css'\r\nimport Message from './message/Message'\r\nimport React from 'react'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport { maxLengthCreator, required } from '../../validators'\r\nimport { Textarea } from '../common/FormControl/FormControl'\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field placeholder='Enter your message'\r\n                className='message_input'\r\n                component={Textarea}\r\n                name='newMessageBody'\r\n                validate={[required, maxLength10]} />\r\n            <button className='to_send_button' >\r\n                <img src='https://icons-for-free.com/iconfiles/png/512/media+message+send+telegram+icon-1320192980424419632.png' alt='to_send' className='to_send_img' />\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm({form: \"dialogAddMessageForm\"})(AddMessageForm)\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let state = props.dialogsPage\r\n\r\n    let DialogsElements = state.dialogs.map(dialog => <Dialog id={dialog.id} friend={dialog.friend} key={dialog.id} />)\r\n\r\n    let MessagesElements = state.messages.map(message => <Message text={message.text} message_class={message.message_class} key={message.id} />)\r\n\r\n\r\n    let addNewMessage = (values) => {\r\n        props.addMessage(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className='dialogs'>\r\n            <div className='dialogs__items'>\r\n                {DialogsElements}\r\n            </div>\r\n            <div className='messages'>\r\n                {MessagesElements}\r\n                <AddMessageFormRedux onSubmit={addNewMessage} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;\r\n","import './Dialogs_style.css'\r\nimport { addMessage } from '../../redux/dialogs_reducer'\r\nimport Dialogs from './Dialogs'\r\nimport { connect } from 'react-redux'\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect'\r\nimport { compose } from 'redux'\r\n\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\n/*\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateNewMessageText: (body) => {\r\n            dispatch(updateNewMessageTextActionCreator(body))\r\n        },\r\n        addMessage: () => {\r\n            dispatch(addMessageActionCreator())\r\n        }\r\n    }\r\n}\r\n\r\nlet authRedirectComponent = withAuthRedirect(Dialogs)\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(authRedirectComponent)\r\n*/\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {addMessage}),\r\n    withAuthRedirect\r\n)(Dialogs);\r\n","export const required = value => {\r\n    if (value) return undefined;\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value.length > maxLength) return ['Max length is ', maxLength, ' simbols'];\r\n    return undefined;\r\n}\r\n"],"names":["Element","input","meta","props","hasError","touched","error","className","Textarea","Input","path","id","to","friend","message_class","text","maxLength10","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","name","validate","required","src","alt","state","dialogsPage","DialogsElements","dialogs","map","dialog","MessagesElements","messages","message","values","addMessage","newMessageBody","compose","connect","withAuthRedirect","Dialogs","value","maxLength","length"],"sourceRoot":""}